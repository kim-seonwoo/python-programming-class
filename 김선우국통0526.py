# -*- coding: utf-8 -*-
"""김선우국통0526

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WnKma-hlqih3YJS1W1NKIYvKSLR-hf3Q
"""

result=[i for i in range(10)]
print(result)

result=[i**i for i in range(10)]
print(result)

result = []
for i in range(10):
    if i %2 ==0:
        result.append(i)
print(result)

result = [i for i in range(10) if i %2 ==0] 
print (result)

result = [i for i in range(10) if i %2 !=0] 
print (result)

result = [i if i %2 !=0 else '짝' for i in range(10) ] 
print (result)

word1 = 'Hello'
for i in word1:
    print(i)

word1 ='Hello'
word2 = 'World'
for i in word1:
    for j in word2:
        print(i+j)



words = 'Python is fun'.split()
print(words)

words = 'Python is fun'.split()
stuff = [[w.upper(),w.lower(),len(w)] for w in words]
print(stuff)

for i in stuff:
    print(i)

case_1 = ["A","B","C"]
case_2 = ["D","E","A"]
result1 = [i+j for i in case_1 for j in case_2]
print(result1)
result2 = [[i+j for i in case_1 ]for j in case_2] # 이차원 리스트 형태로 들어감
print(result2)
# 리스트 컴프리헨션

"""- enumerate(): 리스트의 값을 추출할 때 인덱스를 붙여 함께 출력하는 방법"""

for i,v in enumerate(['tic','tac','toe']):
    print(i,v)

words='Python is fun'
result = {i:j for i,j in enumerate(words.split())}
print(result)


# 인덱스 번호와 함께 출력

case_1 = [1,2,3]
case_2 = [10,20,30]
case_3 = [100,200,300]

for i,j,k in zip(case_1,case_2,case_3):
    print(i,j,k)

a,b,c=zip(case_1,case_2,case_3)
print(a,b,c)
print(a)

case_1 = [1,2,3]
case_2 = [10,20,30]
case_3 = [100,200,300]
result3=[sum(x) for x in zip(case_1,case_2,case_3)]
print(result3)

case_1,case_2,case_3  = [1,2,3],[10,20,30],[100,200,300]

for i,(a,b,c) in enumerate(zip(case_1,case_2,case_3)):
    print(i,a,b,c)

    #괄호를 안하면 벨류 에러 발생

"""- 람다 함수: 함수의 이름 없이 함수처럼 사용할 수 있는 익명의 함수"""

f = lambda x,y: x+y
print(f(1,4))

print((lambda x,y: x+y)(1,4))

print((lambda x: x+1)(4))

print((lambda x,y: (x+y)**2)(1,4))

"""- 맵리듀스: 파이썬 뿐만 아니라 빅데이터를 처리하기 위한 기본 알고리즘으로 많이 사용함

- map(): 연속 데이터를 저장하는 시퀀스 자료형에서 요소마다 같은 기능을 적용할 때 사용
"""

ex = [1,2,3,4,5]
f = lambda x: x**2
print(list(map(f,ex)))

ex = [1,2,3,4,5]
f = lambda x: x**2
for value in map(f,ex):
    print(value)

ex = [1,2,3,4,5]
r = [x**2 for x in ex ]
print(r)

ex = [1,2,3,4,5]
r2=[x+y for x,y in zip(ex,ex)]
print(r2)

# 필터링 기능

ex = [1,2,3,4,5]
r3 = [x**2 if x%2==0 else "홀" for x in ex]
print(r3)

"""- reduce(): 리스트와 같은 시퀀스 자료형에 차례대로 함수를 적용한 다음 모든 값을 통합시켜 주는 함수

별표의 사용: 함수의 가변인수를 사용할 때 변수명 앞에 별표를 붙임.
가변인수, 키워드 가변인수, 언패킹
"""

def asterisk_test(a,args):
    print(a*args)   # 언패킹 기능을 하기도 함
    print(type(args))

asterisk_test(1,(1,2,3,4,5))

a,b,c=([1,2],[3,4],[5,6])
print(a,b,c)

data=([1,2],[3,4],[5,6])
print(*data)  # 언패킹 사용

"""** 별표를 두개 사용하면 딕셔너리 형을 언패킹함
: 키워드 가변인수

선형대수학
"""

