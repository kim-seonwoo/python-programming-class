# -*- coding: utf-8 -*-
"""김선우국통0414

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YXORSFwM7Qy-j0buWfuflsyJJ8y79RBz

p.179 ~ 재귀함수 (recursive function)

5*factorial(5-1)
=5*4*factorial(4-1)
=5*4*3*factorial(3-1)
=5*4*3*2factorial(2-1)
=5*4*3*2*1



-> 이러한 연쇄적인 형식을 점화식 이라고 함
"""

def factorial(n):
    if n==1:
        return 1
    else:
        return n * factorial(n-1)

num = int(input("Input Number:"))
print(factorial(num))

#factorial 함수를 계속하여 연쇄적으로 호출

"""함수의 인수
- 키워드 인수: 함수의 인터페이스에서 지정한 변수명을 사용하여 함수의 인수를 지정하는 방법
- 디폴트 인수: 별도의 인수값이 입력되지 않을 때 인터페이스 선언에서 지정한 초깃값을 사용하는 방법
- 가변 인수: 함수의 인터페이스에서 지정한 변수 이외의 추가 변수를 함수에 입력할 수 있도록 지원하는 방법
- 키워드 가변 인수: 매개변수의 이름을 따로 지정하지 않고 입력하는 방법
"""

# 디폴트 인수: 별도의 인수값이 입력되지 않을 때 인터페이스 
# 선언에서 지정한 초깃값을 사용하는 방법
def print_something(my_name, your_name = "Java"):
    print("Hello {0}, My name is {1}".format(your_name, my_name))

print_something("Seon", "Python") #내가 지정한게 디폴트 값보다 우선한다.
print_something(my_name="Son")

# 가변 인수: 함수의 인터페이스에서 지정한 변수 이외의 추가 변수를 
# 함수에 입력할 수 있도록 지원하는 방법

def asterisk_test(a,b, *args):
    return a+b+sum(args)

print(asterisk_test(1,2,3,4,5))

def asterisk_test(a,b, *args):
    return b*sum(args)

print(asterisk_test(1,2,3,4,5))

def asterisk_test(a,b, *args):
    return min(args), max(args)

print(asterisk_test(1,2,3,4,5))

def asterisk_test(a,b, *args):
    print(args)
    print(type(args))


print(asterisk_test(1,2,3,4,5))

# args는 tuple로 나타남 -> 리스트 자료형 처럼 인덱스로 접근할 수 있는 자료형
# 함수 호출 시 반환 값이 없으므로 None이 출력됨 !

def asterisk_test(a,b, *args):
    print(args[1])

print(asterisk_test(1,2,3,4,5))

def asterisk_test( *args):
    x,y,z=args
    return x,y,z

print(asterisk_test(3,4,5))

def asterisk_test( *args):
    x,y ,*z=args #언패킹 할 때도 *를 붙이면 리스트로 받을 수 있음
    return x,y,z

print(asterisk_test(3,4,5,6,7))

# 키워드 가변 인수: 매개변수의 이름을 따로 지정하지 않고 입력하는 방법
# 딕셔너리 형태
def kwargs_test(one,two,*args,**kwargs):
    print( one + two + sum(args))
    print(kwargs)

kwargs_test(3,4,5,6,7,8,9,first=3,second=4,third=5)

"""함수 문제풀이"""

def counter(*args):
    print(args) #원소가 1개 있는 튜플의 형태로 출력됨
    count = len(args) 
    print(*args)
    return count

print(counter([1,2,3]))

name = 'jiho'

def call_my_name():
    print(name)
    name='sehoon'  #전역 변수를 함수 내에서 재할당 불가
     
call_my_name()

"""예외처리"""

for i in range(10):
    try:
        print(10/i)
    except ZeroDivisionError:
        print("not divided by 0")

for i in range(10):
    try:
        print(10/i)
    except ZeroDivisionError as e:
        print(e)
        print("not divided by 0")

for i in range(10):
    try:
        retult=10/i
    except ZeroDivisionError:
        print("not divided by 0")
    else:
        print(10/i)

try:
    for i in range(1,10):
        result=10//i
        print(result)
except ZeroDivisionError:
    print("not divided by 0")
finally:
    print('종료')

